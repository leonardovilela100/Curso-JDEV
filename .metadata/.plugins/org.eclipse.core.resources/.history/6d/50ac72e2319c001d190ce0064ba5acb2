package filter;

import java.io.IOException;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpFilter;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@WebFilter(urlPatterns = {"/principal/*"})
public class FilterAutenticacao extends HttpFilter implements Filter {
       
 
    public FilterAutenticacao() {
        super();
   
    }

	//Encerra os processos quando o servidor é parado
    //Mataria os processos de conexão com o banco
	public void destroy() {
	
	}

	//Intercepta todas as requisições e da as respostas no sistema
	//Tudo que fizer no sistema vai fazer por aqui
	//Ex: Validação de autenticação
	//Ex: Dar comit e rolback de transações do banco
	//Ex: Validar e fazer redirecionamento de paginas
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		
		HttpServletRequest req = (HttpServletRequest) request;
		HttpSession session = req.getSession()
		
		chain.doFilter(request, response);
	}

	// Executa quando inicia os processos ou recursos quando o servidor sobe o projeto
	//Iniciar a conexão do banco
	public void init(FilterConfig fConfig) throws ServletException {
	}

}
